package neustadt.mco243.microprocessor;

public class Microprocessor {

	private char accumulatorA;
	private char accumulatorB;
	private Memory memory;
	private StringBuilder builder;
	
	public Microprocessor(String memoryString) {
		this.accumulatorA = '0';
		this.accumulatorB = '0';
		this.memory = new Memory(memoryString);
	}

	public char[] processor() {
		int index = 0;

		char code;
		while ((code = memory.getCode(index)) != '8') {
			index++;

			switch (code) {
			case '0':
				builder = new StringBuilder();
				builder.append(array[index]);
				builder.append(array[index + 1]);
				int location = Integer.parseInt(builder.toString(), 16);
				accumulatorA = array[location];
				index += 2;
				break;

			case '1':
				builder = new StringBuilder();
				builder.append(array[index]);
				builder.append(array[index + 1]);
				location = Integer.parseInt(builder.toString(), 16);
				array[location] = accumulatorA;
				index += 2;
				break;

			case '2':
				char temp = accumulatorA;
				accumulatorA = accumulatorB;
				accumulatorB = temp;
				break;

			case '3':
				int sum = Integer.parseInt(String.valueOf(accumulatorA), 16)
						+ Integer.parseInt(String.valueOf(accumulatorB), 16);
				String hex = Integer.toString(sum, 16).toUpperCase();
				if (hex.length() == 1) {
					accumulatorB = '0';
					accumulatorA = hex.charAt(0);
				} else {
					accumulatorB = hex.charAt(0);
					accumulatorA = hex.charAt(1);
				}
				break;

			case '4':
				if (accumulatorA == 'F') {
					accumulatorA = '0';
				} else {
					int temp1 = Integer.parseInt(String.valueOf(accumulatorA),
							16);
					temp1++;
					String hex1 = Integer.toString(temp1, 16).toUpperCase();
					accumulatorA = hex1.charAt(0);
				}
				break;

			case '5':
				if (accumulatorA == '0') {
					accumulatorA = 'F';
				} else {
					int temp2 = Integer.parseInt(String.valueOf(accumulatorA),
							16);
					temp2--;
					String hex2 = Integer.toString(temp2, 16).toUpperCase();
					accumulatorA = hex2.charAt(0);
				}
				break;

			case '6':
				if (accumulatorA == '0') {
					location = Integer.parseInt(
							memory.substring(index, index + 2), 16);
					index = location;
				} else {
					index += 2;
				}
				break;

			case '7':
				location = Integer.parseInt(memory.substring(index, index + 2),
						16);
				index = location;
				break;
			}

		}
		return array;
	}

}